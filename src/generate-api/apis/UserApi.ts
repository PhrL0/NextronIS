/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  UserGet200Response,
  UserIdGet200Response,
  UserIdPutRequest,
  UserRolePost201Response,
  UserRolePostRequest,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    UserGet200ResponseFromJSON,
    UserGet200ResponseToJSON,
    UserIdGet200ResponseFromJSON,
    UserIdGet200ResponseToJSON,
    UserIdPutRequestFromJSON,
    UserIdPutRequestToJSON,
    UserRolePost201ResponseFromJSON,
    UserRolePost201ResponseToJSON,
    UserRolePostRequestFromJSON,
    UserRolePostRequestToJSON,
} from '../models/index';

export interface UserGetRequest {
    sort?: string;
    order?: UserGetOrderEnum;
    direction?: UserGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface UserIdGetRequest {
    id: number;
}

export interface UserIdPutOperationRequest {
    id: number;
    userIdPutRequest?: UserIdPutRequest;
}

export interface UserRolePostOperationRequest {
    userRolePostRequest: UserRolePostRequest;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get all users
     */
    async userGetRaw(requestParameters: UserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all users
     */
    async userGet(requestParameters: UserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGet200Response> {
        const response = await this.userGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find user using ID
     */
    async userIdGetRaw(requestParameters: UserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Find user using ID
     */
    async userIdGet(requestParameters: UserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIdGet200Response> {
        const response = await this.userIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit user
     */
    async userIdPutRaw(requestParameters: UserIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserIdPutRequestToJSON(requestParameters['userIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Edit user
     */
    async userIdPut(requestParameters: UserIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIdGet200Response> {
        const response = await this.userIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add role to user
     */
    async userRolePostRaw(requestParameters: UserRolePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRolePost201Response>> {
        if (requestParameters['userRolePostRequest'] == null) {
            throw new runtime.RequiredError(
                'userRolePostRequest',
                'Required parameter "userRolePostRequest" was null or undefined when calling userRolePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRolePostRequestToJSON(requestParameters['userRolePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRolePost201ResponseFromJSON(jsonValue));
    }

    /**
     * Add role to user
     */
    async userRolePost(requestParameters: UserRolePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRolePost201Response> {
        const response = await this.userRolePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UserGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type UserGetOrderEnum = typeof UserGetOrderEnum[keyof typeof UserGetOrderEnum];
/**
 * @export
 */
export const UserGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type UserGetDirectionEnum = typeof UserGetDirectionEnum[keyof typeof UserGetDirectionEnum];
