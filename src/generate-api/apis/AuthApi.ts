/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost200Response,
  AuthLoginPost401Response,
  AuthLoginPostRequest,
  AuthRegisterPost201Response,
  AuthRegisterPostRequest,
} from '../models/index';
import {
    AuthLoginPost200ResponseFromJSON,
    AuthLoginPost200ResponseToJSON,
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    AuthLoginPostRequestFromJSON,
    AuthLoginPostRequestToJSON,
    AuthRegisterPost201ResponseFromJSON,
    AuthRegisterPost201ResponseToJSON,
    AuthRegisterPostRequestFromJSON,
    AuthRegisterPostRequestToJSON,
} from '../models/index';

export interface AuthLoginPostOperationRequest {
    authLoginPostRequest: AuthLoginPostRequest;
}

export interface AuthRegisterPostOperationRequest {
    authRegisterPostRequest: AuthRegisterPostRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Login user
     */
    async authLoginPostRaw(requestParameters: AuthLoginPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLoginPost200Response>> {
        if (requestParameters['authLoginPostRequest'] == null) {
            throw new runtime.RequiredError(
                'authLoginPostRequest',
                'Required parameter "authLoginPostRequest" was null or undefined when calling authLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthLoginPostRequestToJSON(requestParameters['authLoginPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLoginPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Login user
     */
    async authLoginPost(requestParameters: AuthLoginPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLoginPost200Response> {
        const response = await this.authLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register user
     */
    async authRegisterPostRaw(requestParameters: AuthRegisterPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRegisterPost201Response>> {
        if (requestParameters['authRegisterPostRequest'] == null) {
            throw new runtime.RequiredError(
                'authRegisterPostRequest',
                'Required parameter "authRegisterPostRequest" was null or undefined when calling authRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRegisterPostRequestToJSON(requestParameters['authRegisterPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRegisterPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Register user
     */
    async authRegisterPost(requestParameters: AuthRegisterPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRegisterPost201Response> {
        const response = await this.authRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
