/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  PermissionGet200Response,
  PermissionIdGet200Response,
  PermissionPost200Response,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    PermissionGet200ResponseFromJSON,
    PermissionGet200ResponseToJSON,
    PermissionIdGet200ResponseFromJSON,
    PermissionIdGet200ResponseToJSON,
    PermissionPost200ResponseFromJSON,
    PermissionPost200ResponseToJSON,
} from '../models/index';

export interface PermissionGetRequest {
    sort?: string;
    order?: PermissionGetOrderEnum;
    direction?: PermissionGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface PermissionIdGetRequest {
    id: number;
}

/**
 * 
 */
export class PermissionApi extends runtime.BaseAPI {

    /**
     * Get all permissions
     */
    async permissionGetRaw(requestParameters: PermissionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/permission/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all permissions
     */
    async permissionGet(requestParameters: PermissionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionGet200Response> {
        const response = await this.permissionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a permission by id
     */
    async permissionIdGetRaw(requestParameters: PermissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling permissionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a permission by id
     */
    async permissionIdGet(requestParameters: PermissionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionIdGet200Response> {
        const response = await this.permissionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a permission
     */
    async permissionPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/permission/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register a permission
     */
    async permissionPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionPost200Response> {
        const response = await this.permissionPostRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PermissionGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type PermissionGetOrderEnum = typeof PermissionGetOrderEnum[keyof typeof PermissionGetOrderEnum];
/**
 * @export
 */
export const PermissionGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type PermissionGetDirectionEnum = typeof PermissionGetDirectionEnum[keyof typeof PermissionGetDirectionEnum];
