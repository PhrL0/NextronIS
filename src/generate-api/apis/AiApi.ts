/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiPostRequest,
  AuthLoginPost401Response,
} from '../models/index';
import {
    AiPostRequestFromJSON,
    AiPostRequestToJSON,
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
} from '../models/index';

export interface AiPostOperationRequest {
    aiPostRequest: AiPostRequest;
}

/**
 * 
 */
export class AiApi extends runtime.BaseAPI {

    /**
     * Get AI configuration
     */
    async aiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ai/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get AI configuration
     */
    async aiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiGetRaw(initOverrides);
    }

    /**
     * Answer a question using AI
     */
    async aiPostRaw(requestParameters: AiPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aiPostRequest'] == null) {
            throw new runtime.RequiredError(
                'aiPostRequest',
                'Required parameter "aiPostRequest" was null or undefined when calling aiPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ai/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiPostRequestToJSON(requestParameters['aiPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Answer a question using AI
     */
    async aiPost(requestParameters: AiPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aiPostRaw(requestParameters, initOverrides);
    }

}
