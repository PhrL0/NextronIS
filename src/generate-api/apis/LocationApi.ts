/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  LocateGet200Response,
  LocateIdGet200Response,
  LocatePostRequest,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    LocateGet200ResponseFromJSON,
    LocateGet200ResponseToJSON,
    LocateIdGet200ResponseFromJSON,
    LocateIdGet200ResponseToJSON,
    LocatePostRequestFromJSON,
    LocatePostRequestToJSON,
} from '../models/index';

export interface LocateGetRequest {
    sort?: string;
    order?: LocateGetOrderEnum;
    direction?: LocateGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface LocateIdGetRequest {
    id: number;
}

export interface LocatePostOperationRequest {
    locatePostRequest: LocatePostRequest;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     * Get all locations
     */
    async locateGetRaw(requestParameters: LocateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocateGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locate/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocateGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all locations
     */
    async locateGet(requestParameters: LocateGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocateGet200Response> {
        const response = await this.locateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get location by id
     */
    async locateIdGetRaw(requestParameters: LocateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocateIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locateIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocateIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get location by id
     */
    async locateIdGet(requestParameters: LocateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocateIdGet200Response> {
        const response = await this.locateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new location
     */
    async locatePostRaw(requestParameters: LocatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'locatePostRequest',
                'Required parameter "locatePostRequest" was null or undefined when calling locatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/locate/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocatePostRequestToJSON(requestParameters['locatePostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new location
     */
    async locatePost(requestParameters: LocatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locatePostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const LocateGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type LocateGetOrderEnum = typeof LocateGetOrderEnum[keyof typeof LocateGetOrderEnum];
/**
 * @export
 */
export const LocateGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type LocateGetDirectionEnum = typeof LocateGetDirectionEnum[keyof typeof LocateGetDirectionEnum];
