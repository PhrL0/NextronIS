/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  MachineGet200Response,
  MachineIdGet200Response,
  MachinePost200Response,
  MachinePostRequest,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    MachineGet200ResponseFromJSON,
    MachineGet200ResponseToJSON,
    MachineIdGet200ResponseFromJSON,
    MachineIdGet200ResponseToJSON,
    MachinePost200ResponseFromJSON,
    MachinePost200ResponseToJSON,
    MachinePostRequestFromJSON,
    MachinePostRequestToJSON,
} from '../models/index';

export interface MachineGetRequest {
    sort?: string;
    order?: MachineGetOrderEnum;
    direction?: MachineGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface MachineIdGetRequest {
    id: number;
}

export interface MachinePostOperationRequest {
    machinePostRequest: MachinePostRequest;
}

/**
 * 
 */
export class MachineApi extends runtime.BaseAPI {

    /**
     * Get all machines
     */
    async machineGetRaw(requestParameters: MachineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MachineGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MachineGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all machines
     */
    async machineGet(requestParameters: MachineGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MachineGet200Response> {
        const response = await this.machineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get machine by id
     */
    async machineIdGetRaw(requestParameters: MachineIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MachineIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling machineIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MachineIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get machine by id
     */
    async machineIdGet(requestParameters: MachineIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MachineIdGet200Response> {
        const response = await this.machineIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new machine
     */
    async machinePostRaw(requestParameters: MachinePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MachinePost200Response>> {
        if (requestParameters['machinePostRequest'] == null) {
            throw new runtime.RequiredError(
                'machinePostRequest',
                'Required parameter "machinePostRequest" was null or undefined when calling machinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MachinePostRequestToJSON(requestParameters['machinePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MachinePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register a new machine
     */
    async machinePost(requestParameters: MachinePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MachinePost200Response> {
        const response = await this.machinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MachineGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MachineGetOrderEnum = typeof MachineGetOrderEnum[keyof typeof MachineGetOrderEnum];
/**
 * @export
 */
export const MachineGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MachineGetDirectionEnum = typeof MachineGetDirectionEnum[keyof typeof MachineGetDirectionEnum];
