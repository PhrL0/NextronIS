/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttributeGet200Response,
  AttributeIdGet200Response,
  AttributePost200Response,
  AttributePostRequest,
  AuthLoginPost401Response,
} from '../models/index';
import {
    AttributeGet200ResponseFromJSON,
    AttributeGet200ResponseToJSON,
    AttributeIdGet200ResponseFromJSON,
    AttributeIdGet200ResponseToJSON,
    AttributePost200ResponseFromJSON,
    AttributePost200ResponseToJSON,
    AttributePostRequestFromJSON,
    AttributePostRequestToJSON,
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
} from '../models/index';

export interface AttributeGetRequest {
    sort?: string;
    order?: AttributeGetOrderEnum;
    direction?: AttributeGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface AttributeIdGetRequest {
    id: number;
}

export interface AttributePostOperationRequest {
    attributePostRequest: AttributePostRequest;
}

/**
 * 
 */
export class AttributeApi extends runtime.BaseAPI {

    /**
     * Get all attributes
     */
    async attributeGetRaw(requestParameters: AttributeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attribute/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all attributes
     */
    async attributeGet(requestParameters: AttributeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeGet200Response> {
        const response = await this.attributeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get attribute by id
     */
    async attributeIdGetRaw(requestParameters: AttributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attributeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attribute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get attribute by id
     */
    async attributeIdGet(requestParameters: AttributeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeIdGet200Response> {
        const response = await this.attributeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register new attribute
     */
    async attributePostRaw(requestParameters: AttributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributePost200Response>> {
        if (requestParameters['attributePostRequest'] == null) {
            throw new runtime.RequiredError(
                'attributePostRequest',
                'Required parameter "attributePostRequest" was null or undefined when calling attributePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/attribute/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributePostRequestToJSON(requestParameters['attributePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register new attribute
     */
    async attributePost(requestParameters: AttributePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributePost200Response> {
        const response = await this.attributePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AttributeGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AttributeGetOrderEnum = typeof AttributeGetOrderEnum[keyof typeof AttributeGetOrderEnum];
/**
 * @export
 */
export const AttributeGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AttributeGetDirectionEnum = typeof AttributeGetDirectionEnum[keyof typeof AttributeGetDirectionEnum];
