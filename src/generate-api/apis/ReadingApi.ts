/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  ReadingGet200Response,
  ReadingIdGet200Response,
  ReadingPost200Response,
  ReadingPostRequest,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    ReadingGet200ResponseFromJSON,
    ReadingGet200ResponseToJSON,
    ReadingIdGet200ResponseFromJSON,
    ReadingIdGet200ResponseToJSON,
    ReadingPost200ResponseFromJSON,
    ReadingPost200ResponseToJSON,
    ReadingPostRequestFromJSON,
    ReadingPostRequestToJSON,
} from '../models/index';

export interface ReadingGetRequest {
    sort?: string;
    order?: ReadingGetOrderEnum;
    direction?: ReadingGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface ReadingIdGetRequest {
    id: number;
}

export interface ReadingPostOperationRequest {
    readingPostRequest: ReadingPostRequest;
}

/**
 * 
 */
export class ReadingApi extends runtime.BaseAPI {

    /**
     * Get all readings
     */
    async readingGetRaw(requestParameters: ReadingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadingGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reading/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadingGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all readings
     */
    async readingGet(requestParameters: ReadingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadingGet200Response> {
        const response = await this.readingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get reading by id
     */
    async readingIdGetRaw(requestParameters: ReadingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadingIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling readingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reading/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadingIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get reading by id
     */
    async readingIdGet(requestParameters: ReadingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadingIdGet200Response> {
        const response = await this.readingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a reading
     */
    async readingPostRaw(requestParameters: ReadingPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadingPost200Response>> {
        if (requestParameters['readingPostRequest'] == null) {
            throw new runtime.RequiredError(
                'readingPostRequest',
                'Required parameter "readingPostRequest" was null or undefined when calling readingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reading/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadingPostRequestToJSON(requestParameters['readingPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadingPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a reading
     */
    async readingPost(requestParameters: ReadingPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadingPost200Response> {
        const response = await this.readingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReadingGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ReadingGetOrderEnum = typeof ReadingGetOrderEnum[keyof typeof ReadingGetOrderEnum];
/**
 * @export
 */
export const ReadingGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ReadingGetDirectionEnum = typeof ReadingGetDirectionEnum[keyof typeof ReadingGetDirectionEnum];
