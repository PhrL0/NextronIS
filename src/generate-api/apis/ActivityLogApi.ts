/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityLogGet200Response,
  ActivityLogIdGet200Response,
  ActivityLogPost200Response,
  ActivityLogPostRequest,
  AuthLoginPost401Response,
} from '../models/index';
import {
    ActivityLogGet200ResponseFromJSON,
    ActivityLogGet200ResponseToJSON,
    ActivityLogIdGet200ResponseFromJSON,
    ActivityLogIdGet200ResponseToJSON,
    ActivityLogPost200ResponseFromJSON,
    ActivityLogPost200ResponseToJSON,
    ActivityLogPostRequestFromJSON,
    ActivityLogPostRequestToJSON,
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
} from '../models/index';

export interface ActivityLogGetRequest {
    sort?: string;
    order?: ActivityLogGetOrderEnum;
    direction?: ActivityLogGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface ActivityLogIdGetRequest {
    id: number;
}

export interface ActivityLogPostOperationRequest {
    activityLogPostRequest: ActivityLogPostRequest;
}

/**
 * 
 */
export class ActivityLogApi extends runtime.BaseAPI {

    /**
     * Get all activity logs
     */
    async activityLogGetRaw(requestParameters: ActivityLogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLogGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity-log/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all activity logs
     */
    async activityLogGet(requestParameters: ActivityLogGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLogGet200Response> {
        const response = await this.activityLogGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get activity log by id
     */
    async activityLogIdGetRaw(requestParameters: ActivityLogIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLogIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling activityLogIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity-log/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get activity log by id
     */
    async activityLogIdGet(requestParameters: ActivityLogIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLogIdGet200Response> {
        const response = await this.activityLogIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a activity log
     */
    async activityLogPostRaw(requestParameters: ActivityLogPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLogPost200Response>> {
        if (requestParameters['activityLogPostRequest'] == null) {
            throw new runtime.RequiredError(
                'activityLogPostRequest',
                'Required parameter "activityLogPostRequest" was null or undefined when calling activityLogPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity-log/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityLogPostRequestToJSON(requestParameters['activityLogPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register a activity log
     */
    async activityLogPost(requestParameters: ActivityLogPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLogPost200Response> {
        const response = await this.activityLogPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ActivityLogGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ActivityLogGetOrderEnum = typeof ActivityLogGetOrderEnum[keyof typeof ActivityLogGetOrderEnum];
/**
 * @export
 */
export const ActivityLogGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ActivityLogGetDirectionEnum = typeof ActivityLogGetDirectionEnum[keyof typeof ActivityLogGetDirectionEnum];
