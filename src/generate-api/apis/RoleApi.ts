/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  RoleGet200Response,
  RoleIdGet200Response,
  RolePost200Response,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    RoleGet200ResponseFromJSON,
    RoleGet200ResponseToJSON,
    RoleIdGet200ResponseFromJSON,
    RoleIdGet200ResponseToJSON,
    RolePost200ResponseFromJSON,
    RolePost200ResponseToJSON,
} from '../models/index';

export interface RoleGetRequest {
    sort?: string;
    order?: RoleGetOrderEnum;
    direction?: RoleGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface RoleIdGetRequest {
    id: number;
}

/**
 * 
 */
export class RoleApi extends runtime.BaseAPI {

    /**
     * Get all roles
     */
    async roleGetRaw(requestParameters: RoleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/role/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all roles
     */
    async roleGet(requestParameters: RoleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleGet200Response> {
        const response = await this.roleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a role by id
     */
    async roleIdGetRaw(requestParameters: RoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling roleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a role by id
     */
    async roleIdGet(requestParameters: RoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleIdGet200Response> {
        const response = await this.roleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a user role
     */
    async rolePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/role/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Register a user role
     */
    async rolePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePost200Response> {
        const response = await this.rolePostRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RoleGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type RoleGetOrderEnum = typeof RoleGetOrderEnum[keyof typeof RoleGetOrderEnum];
/**
 * @export
 */
export const RoleGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type RoleGetDirectionEnum = typeof RoleGetDirectionEnum[keyof typeof RoleGetDirectionEnum];
