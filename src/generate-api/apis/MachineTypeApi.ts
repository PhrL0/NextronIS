/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  MachineTypeGet200Response,
  MachineTypeIdGet200Response,
  MachineTypePostRequest,
} from '../models/index';
import {
    AuthLoginPost401ResponseFromJSON,
    AuthLoginPost401ResponseToJSON,
    MachineTypeGet200ResponseFromJSON,
    MachineTypeGet200ResponseToJSON,
    MachineTypeIdGet200ResponseFromJSON,
    MachineTypeIdGet200ResponseToJSON,
    MachineTypePostRequestFromJSON,
    MachineTypePostRequestToJSON,
} from '../models/index';

export interface MachineTypeGetRequest {
    sort?: string;
    order?: MachineTypeGetOrderEnum;
    direction?: MachineTypeGetDirectionEnum;
    page?: number;
    limit?: number;
}

export interface MachineTypeIdGetRequest {
    id: number;
}

export interface MachineTypePostOperationRequest {
    machineTypePostRequest: MachineTypePostRequest;
}

/**
 * 
 */
export class MachineTypeApi extends runtime.BaseAPI {

    /**
     * Get all machine types
     */
    async machineTypeGetRaw(requestParameters: MachineTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MachineTypeGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/type/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MachineTypeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all machine types
     */
    async machineTypeGet(requestParameters: MachineTypeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MachineTypeGet200Response> {
        const response = await this.machineTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a machine type by id
     */
    async machineTypeIdGetRaw(requestParameters: MachineTypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MachineTypeIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling machineTypeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/type/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MachineTypeIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a machine type by id
     */
    async machineTypeIdGet(requestParameters: MachineTypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MachineTypeIdGet200Response> {
        const response = await this.machineTypeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a machine type
     */
    async machineTypePostRaw(requestParameters: MachineTypePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['machineTypePostRequest'] == null) {
            throw new runtime.RequiredError(
                'machineTypePostRequest',
                'Required parameter "machineTypePostRequest" was null or undefined when calling machineTypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machine/type/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MachineTypePostRequestToJSON(requestParameters['machineTypePostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a machine type
     */
    async machineTypePost(requestParameters: MachineTypePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.machineTypePostRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const MachineTypeGetOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MachineTypeGetOrderEnum = typeof MachineTypeGetOrderEnum[keyof typeof MachineTypeGetOrderEnum];
/**
 * @export
 */
export const MachineTypeGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MachineTypeGetDirectionEnum = typeof MachineTypeGetDirectionEnum[keyof typeof MachineTypeGetDirectionEnum];
