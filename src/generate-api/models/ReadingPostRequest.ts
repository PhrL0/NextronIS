/* tslint:disable */
/* eslint-disable */
/**
 * Nextron API
 * API for managing machines, users, and AI models in Nextron
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReadingPostRequest
 */
export interface ReadingPostRequest {
    /**
     * 
     * @type {Date}
     * @memberof ReadingPostRequest
     */
    recordedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ReadingPostRequest
     */
    dayOfWeek: ReadingPostRequestDayOfWeekEnum;
    /**
     * 
     * @type {string}
     * @memberof ReadingPostRequest
     */
    status: ReadingPostRequestStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ReadingPostRequest
     */
    machineId: number;
    /**
     * 
     * @type {number}
     * @memberof ReadingPostRequest
     */
    attributeId: number;
    /**
     * 
     * @type {string}
     * @memberof ReadingPostRequest
     */
    attributeValue: string;
}


/**
 * @export
 */
export const ReadingPostRequestDayOfWeekEnum = {
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;
export type ReadingPostRequestDayOfWeekEnum = typeof ReadingPostRequestDayOfWeekEnum[keyof typeof ReadingPostRequestDayOfWeekEnum];

/**
 * @export
 */
export const ReadingPostRequestStatusEnum = {
    Strange: 'STRANGE',
    Normal: 'NORMAL',
    Alert: 'ALERT',
    Dangerous: 'DANGEROUS',
    Critical: 'CRITICAL'
} as const;
export type ReadingPostRequestStatusEnum = typeof ReadingPostRequestStatusEnum[keyof typeof ReadingPostRequestStatusEnum];


/**
 * Check if a given object implements the ReadingPostRequest interface.
 */
export function instanceOfReadingPostRequest(value: object): value is ReadingPostRequest {
    if (!('recordedAt' in value) || value['recordedAt'] === undefined) return false;
    if (!('dayOfWeek' in value) || value['dayOfWeek'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('machineId' in value) || value['machineId'] === undefined) return false;
    if (!('attributeId' in value) || value['attributeId'] === undefined) return false;
    if (!('attributeValue' in value) || value['attributeValue'] === undefined) return false;
    return true;
}

export function ReadingPostRequestFromJSON(json: any): ReadingPostRequest {
    return ReadingPostRequestFromJSONTyped(json, false);
}

export function ReadingPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReadingPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'recordedAt': (new Date(json['recorded_at'])),
        'dayOfWeek': json['day_of_week'],
        'status': json['status'],
        'machineId': json['machine_id'],
        'attributeId': json['attribute_id'],
        'attributeValue': json['attribute_value'],
    };
}

export function ReadingPostRequestToJSON(json: any): ReadingPostRequest {
    return ReadingPostRequestToJSONTyped(json, false);
}

export function ReadingPostRequestToJSONTyped(value?: ReadingPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'recorded_at': ((value['recordedAt']).toISOString()),
        'day_of_week': value['dayOfWeek'],
        'status': value['status'],
        'machine_id': value['machineId'],
        'attribute_id': value['attributeId'],
        'attribute_value': value['attributeValue'],
    };
}

