from APIgemini import gemini
from sensoresDAO import SensoresDAO

class Controller:
    
    def __init__(self):
        self.dao = SensoresDAO()
    
    def  selectAndReports(self, responseData):
       
        dataQuery = self.dao.selectDB(responseData)
        #dataQuery = {'min_temperatura': 44.45, 'max_temperatura': 92.75, 'avg_temperatura': 64.4675, 'min_vibracao': 2.04, 'max_vibracao': 2.82, 'avg_vibracao': 2.465, 'min_rotacao': 
        #0.83, 'max_rotacao': 1.88, 'avg_rotacao': 1.2625}
        
        prompt = f"""Analise os resultados da query SQL abaixo e gere um relat√≥rio t√©cnico detalhado com insights acion√°veis. Siga rigorosamente a estrutura e diretrizes:  

        **Contexto**: Voc√™ √© um engenheiro de manuten√ß√£o preditiva em uma f√°brica. Os dados referem-se a sensores de m√°quinas.  

        **Dados da Query** (resultados em formato tabular):  
        {dataQuery}  

        **Instru√ß√µes**:  
        1. **Resumo Estat√≠stico**:   
           - Destaque valores fora dos limites operacionais (ex.: temperatura >85¬∞C, vibra√ß√£o >6.0mm/s).  

        2. **Identifica√ß√£o de Anomalias**:  
           - Sinalize picos (ex.: se m√°ximo estiver 40% acima da m√©dia).  
           - Marque com ‚ùó observa√ß√µes cr√≠ticas (ex.: "‚ùóVibra√ß√£o m√°xima de 7.8mm/s: risco de falha no rolamento").  
           - 0: Normal üü¢ | 1: Alerta üü° (Monitorar) | 2: Cr√≠tico üî¥ (Agir Imediatamente)  

        3. **Correla√ß√µes T√©cnicas**:  
           - Relacione vari√°veis (ex.: "Rota√ß√£o elevada + vibra√ß√£o alta sugerem desbalanceamento").  

        4. **Recomenda√ß√µes**:  
           - Liste 3 a 5 a√ß√µes priorit√°rias (ex.: "1. Verificar sistema de refrigera√ß√£o da m√°quina X").  

        **Notas**:  
        - Se houver dados inv√°lidos (ex.: rota√ß√£o m√≠nima 0 RPM), alerte.  
        - Use linguagem t√©cnica, mas evite jarg√µes excessivos.  
        - Formate a resposta em **4 se√ß√µes** com t√≠tulos em negrito."""

        reports = gemini(prompt)

        return {"responseQuery":dataQuery,"insightGemini":reports}
    
    
    def controllerInsertDB(self,temperatura, corrente, rotacao, vibracao, dt_Regis, status):
        self.dao.insertDB(temperatura, corrente, rotacao, vibracao, dt_Regis, status)
